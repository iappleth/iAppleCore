/*
 ************************************************************************************
 * Copyright (C) 2022 Openbravo S.L.U.
 * Licensed under the Openbravo Commercial License version 1.0
 * You may obtain a copy of the License at http://www.openbravo.com/legal/obcl.html
 * or in the legal folder of this module distribution.
 ************************************************************************************
 */

/* global */
(function OBPOSBussinessLogicUtilsDefinition() {
  OB.UTIL = window.OB.UTIL || {};

  /**
   * Generates the template data for a documents
   * This APi is used for DeliverDocument messages generated by the application
   *
   * @param {object} document - the document to generate template data
   * @returns a object with the template data in case it is successfuly generated, and error otherwise
   */
  OB.UTIL.generateDocumentTemplateDataMessage = async document => {
    const { templateName, deliveries = [], params = {} } = document;

    if (!templateName) {
      return generateErrorMessageCreatingTemplateData();
    }

    let templateDataMessage;
    try {
      const template = OB.App.PrintTemplateStore.get(templateName);
      const templateData = await template.generate({
        ...params
      });
      templateDataMessage = generateSuccessMessageCreatingTemplateData(
        template,
        templateData,
        deliveries,
        templateName,
        params
      );
    } catch (error) {
      templateDataMessage = generateErrorMessageCreatingTemplateData();
    }

    return templateDataMessage;
  };

  function generateSuccessMessageCreatingTemplateData(
    templateDefinition,
    templateData,
    deliveries,
    templateName,
    params
  ) {
    if (templateDefinition.ispdf) {
      return generateMessageJasperTemplateData(
        templateData,
        deliveries,
        templateName
      );
    }

    return generateMessageXmlTemplateData(
      templateData,
      deliveries,
      templateName,
      params
    );
  }

  function generateMessageJasperTemplateData(
    templateData,
    deliveries,
    templateName
  ) {
    return {
      templateData,
      deliveries,
      templateName,
      isJasperTemplate: true
    };
  }

  function generateMessageXmlTemplateData(
    templateData,
    deliveries,
    templateName,
    templateParams
  ) {
    return {
      templateData: { ...templateData, params: templateParams },
      deliveries,
      templateName,
      isJasperTemplate: false
    };
  }

  function generateErrorMessageCreatingTemplateData() {
    return {
      failedToGenerateTemplateData: true
    };
  }
})();
